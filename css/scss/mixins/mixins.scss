/*------------------------------------*\
	Vendor Prefixes
\*------------------------------------*/

@mixin vendor($property, $value...) {
	-webkit-#{$property}:$value;
	-moz-#{$property}:$value;
	-ms-#{$property}:$value;
	-o-#{$property}:$value;
	#{$property}:$value;
}

/*------------------------------------*\
	Media Queries
\*------------------------------------*/

$breakpoints: false !default;
 
@mixin respond($context) {
  @if $breakpoints != false {
    // Check to see if the 2nd item is a number. If it is, we've got a single query
    @if type-of(nth($breakpoints, 2)) == 'number' {
      // Check to see if the context matches the breakpoint namespace
      @if $context == nth($breakpoints, 1) {
        // Call Media Query Generator
        @include media-query-gen($breakpoints) {
          @content;
        }
      }
    }
    // Else, loop over all of them
    @else {
      // Loop over each breakpoint and check context
      @each $bkpt in $breakpoints {
        // If context is correctâ€¦
        @if $context == nth($bkpt, 1) {
          // Call the generator!
          @include media-query-gen($bkpt) {
            @content;
          }
        }
      }
    }
  }
}
 
// This functionality gets used twice so I turned it into its own mixin.
 
@mixin media-query-gen($bpt) {
  // Get length of breakpoint variable, minus the namespace
  $length: length($bpt);
  // Go through all of the breakpoint items, starting at the second, and add them to a variable to be passed into the media query mixin
  $mq: false !default;
  @for $i from 2 through $length {
    // If it's the first item, override $mq
    @if $i == 2 {
      $mq: nth($bpt, $i);
    }
    // Else, join $mq
    @else {
      $mq: join($mq, nth($bpt, $i));
    }
  }
  // Call Media Query mixin
  @include media-query($mq) {
    @content;
  }
}
 
// Slightly modified version of my Media Query Mixin (https://gist.github.com/2490750) from earlier, modified to accommodate list input
@mixin media-query($value, $operator: 'min-width', $query: 'screen') {
  // If a list is passed in for value, break it into value, operator, and query
  @if type-of($value) == 'list' {
    $mq: $value;
    
    @for $i from 1 through length($mq) {
      @if $i == 1 {
        $value: nth($mq, 1);
      }
      @else if $i == 2 {
        $operator: nth($mq, 2);
      }
      @else if $i == 3 {
        $query: nth($mq, 3);
      }
    }
  }
  
  @media #{$query} and (#{$operator}: #{$value}) {
    @content;
  }
}

/*------------------------------------*\
	Position
\*------------------------------------*/

@mixin position ($position: relative, $coordinates: 0 0 0 0) {
	@if type-of($position) == list {
		$coordinates:$position;
		$position:relative;
	}
	$top:nth($coordinates, 1);
	$right:nth($coordinates, 2);
	$bottom:nth($coordinates, 3);
	$left:nth($coordinates, 4);
	
	position:$position;
	
	@if $top == auto {
		top:$top;
	}
	@else if not(unitless($top)) {
		top:$top;
	}
	@if $right == auto {
		right:$right;
	}
	@else if not(unitless($right)) {
		right:$right;
	}
	@if $bottom == auto {
		bottom:$bottom;
	}
	@else if not(unitless($bottom)) {
		bottom:$bottom;
	}
	@if $left == auto {
		left:$left;
	}
	@else if not(unitless($left)) {
		left:$left;
	}
}